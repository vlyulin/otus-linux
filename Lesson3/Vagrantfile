# -*- mode: ruby -*-
# vim: set ft=ruby :
home = ENV['HOME']
ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :lvm => {
        :box_name => "centos/7",
        :box_version => "1804.02",
        :ip_addr => '192.168.56.101',
    :disks => {
        :sata1 => {
            :dfile => home + '/VirtualBox VMs/sata1.vdi',
            :size => 10240,
            :port => 1
        },
        :sata2 => {
            :dfile => home + '/VirtualBox VMs/sata2.vdi',
            :size => 2048, # Megabytes
            :port => 2
        },
        :sata3 => {
            :dfile => home + '/VirtualBox VMs/sata3.vdi',
            :size => 1024, # Megabytes
            :port => 3
        },
        :sata4 => {
            :dfile => home + '/VirtualBox VMs/sata4.vdi',
            :size => 1024,
            :port => 4
        }
    }
  },
}

Vagrant.configure("2") do |config|

    config.vm.box_version = "1804.02"
    MACHINES.each do |boxname, boxconfig|
  
        config.vm.define boxname do |box|
 
            config.vbguest.installer_options = { allow_kernel_upgrade: true } 
            box.vm.box = boxconfig[:box_name]
            box.vm.host_name = boxname.to_s
  
            #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset
  
            box.vm.network "private_network", ip: boxconfig[:ip_addr]
  
            box.vm.provider :virtualbox do |vb|
                    vb.customize ["modifyvm", :id, "--memory", "256"]
                    needsController = false
                    boxconfig[:disks].each do |dname, dconf|
                    unless File.exist?(dconf[:dfile])
                           vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                           needsController =  true
		    end
            end

            if needsController == true
                   vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                   boxconfig[:disks].each do |dname, dconf|
                    vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                   end
            end
	end
 
        box.vm.provision "first", type: "shell", inline: <<-SHELL
            mkdir -p ~root/.ssh
            cp ~vagrant/.ssh/auth* ~root/.ssh
            yum install -y mdadm smartmontools hdparm gdisk
        SHELL
	# https://superuser.com/questions/1338429/how-do-i-reboot-a-vagrant-guest-from-a-provisioner
        box.vm.provision "lvm", after: "first", type: "shell", path: "lesson3-part1.sh"
        config.vm.provision "reboot1", after: "lvm", type: "shell" do |s|
          	s.privileged = true
           	s.inline = "echo 'rebooting after part1'"
           	s.reboot = true
        end
	box.vm.provision "shell1", after: "reboot1", type: "shell", path: "wait-vagrant-ssh.sh"
        box.vm.provision "to8g", after: "shell1", type: "shell", path: "lesson3-part2.sh"
	config.vm.provision "reboot2", after: "to8g", type: "shell" do |s|
                s.privileged = true
                s.inline = "echo 'rebooting after to8g'"
                s.reboot = true
        end
        box.vm.provision "shell2", after: "reboot2", type: "shell", path: "wait-vagrant-ssh.sh"
        box.vm.provision "var", after: "shell2", type: "shell", path: "lesson3-part3.sh"
        box.vm.provision "the-end", after: "var", type: "shell", path: "lesson3-part4.sh"
        config.vm.provision "reboot3", after: "the-end", type: "shell" do |s|
                s.privileged = true
                s.inline = "echo 'rebooting after the-end'"
                s.reboot = true
        end
        end
    end
end  

