---
# Настройка front серверов
- name: Setup front-servers
  hosts: fronts
  become: true
  become_user: root
  vars:
    server_name: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    acme_challenge_type: http-01
    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    acme_version: 2
    acme_email: certificate-reminders@vldomain.edu
    letsencrypt_dir: /etc/letsencrypt
    letsencrypt_keys_dir: /etc/letsencrypt/keys
    letsencrypt_csrs_dir: /etc/letsencrypt/csrs
    letsencrypt_certs_dir: /etc/letsencrypt/certs
    letsencrypt_account_key: /etc/letsencrypt/account/account.key
    remaining_days: 36
    project_path: /mnt/ceph/app
    domain_name: app.ru

  tasks:   

  - debug: var=hostvars[inventory_hostname]['ansible_default_ipv4']['address']

  - name: Install nginx
    yum:
      name: nginx
      state: present

  - name: install openssl and depends
    yum: name={{item}} state=present
    with_items:
      - python-pip
      - python34-devel
      - pyOpenSSL
      
  # - name: Install cryptography
  #  yum:
  #    name: cryptography
  #    state: present

  # - name: force upgrade pip
  #  pip:
  #    name: pip
  #    state: latest

  # - name: install latest pyOpenSSL if needed
  #  pip:
  #    name: pyOpenSSL
  #    state: latest
  #    extra_args: --upgrade

  - name: install cryptography
    pip: 
      name: cryptography
      state: latest

  # Create the directories required by letsencrypt to store keys and certificates.
  - name: "Create required directories in /etc/letsencrypt"
    become: yes
    file:
      path: "/etc/letsencrypt/{{ item }}"
      state: directory
      owner: root
      group: root
      mode: u=rwx,g=x,o=x
    with_items:
      - account
      - certs
      - csrs
      - keys
  
  # https://docs.ansible.com/ansible/2.9/modules/acme_certificate_module.html#acme-certificate-module
  - name: Generate let's encrypt account key
    become: yes
    openssl_privatekey:
      path: "{{ letsencrypt_account_key }}"
  
  # https://docs.ansible.com/ansible/latest/collections/community/crypto/openssl_privatekey_module.html#openssl-privatekey-module
  - name: Generate let's encrypt private key with the default values (4096 bits, RSA)
    become: yes
    openssl_privatekey:
      path: "{{letsencrypt_keys_dir}}/{{ domain_name }}.key"
  
  # https://docs.ansible.com/ansible/latest/collections/community/crypto/openssl_csr_module.html#openssl-csr-module
  - name: Generate an OpenSSL Certificate Signing Request
    become: yes
    community.crypto.openssl_csr:
      path: "{{letsencrypt_csrs_dir}}/{{ domain_name }}.csr"
      privatekey_path: "{{letsencrypt_keys_dir}}/{{ domain_name }}.key"
      common_name: "{{domain_name}}"
  
  # Create letsencrypt challenge.
  - name: Create a challenge for {{domain_name}} using a account key file.
    become: yes
    community.crypto.acme_certificate:
      acme_directory: "{{acme_directory}}"
      acme_version: "{{acme_version}}"
      account_email: "{{acme_email}}"
      terms_agreed: yes
      account_key_src: "{{letsencrypt_account_key}}"
      csr: "{{letsencrypt_csrs_dir}}/{{domain_name}}.csr"
      dest: "{{letsencrypt_certs_dir}}/{{domain_name}}.crt"
      remaining_days: "{{remaining_days}}"
    register: acme_challenge
  
  # Create the directory to hold the validation token.
  - name: "Create .well-known/acme-challenge directory"
    become: yes
    file:
      path: "{{project_path}}/.well-known/acme-challenge"
      state: directory
      owner: root
      group: root
      mode: u=rwx,g=rx,o=rx
  
  # Copy the necessary files for the http-01 challenge.
  - name: "Implement http-01 challenge files"
    become: yes
    copy:
      dest: "{{project_path}}/{{ acme_challenge['challenge_data'][item]['http-01']['resource'] }}"
      content: "{{ acme_challenge['challenge_data'][item]['http-01']['resource_value'] }}"
    with_items:
      - "{{ domain_name }}"
    when: acme_challenge is changed and domain_name|string in acme_challenge['challenge_data']
  
  # Execute letsencrypt challenge.
#  - name: Let the challenge be validated and retrieve the cert and intermediate certificate
#    become: yes
#    community.crypto.acme_certificate:
#      account_key_src: "{{letsencrypt_account_key}}"
#      csr: "{{letsencrypt_csrs_dir}}/{{domain_name}}.csr"
#      cert: "{{letsencrypt_certs_dir}}/{{domain_name}}.crt"
#      acme_directory: "{{acme_directory}}"
#      acme_version: "{{acme_version}}"
#      account_email: "{{acme_email}}"
#      challenge: "{{acme_challenge_type}}"
#      fullchain: "{{letsencrypt_certs_dir}}/{{domain_name}}-fullchain.crt"
#      chain: "{{letsencrypt_certs_dir}}/{{domain_name}}-intermediate.crt"
#      remaining_days: "{{remaining_days}}"
#      data: "{{ acme_challenge }}"
#    when: acme_challenge is changed

  - name: Apply Nginx template
    template:
      src: files/nginx.front.conf.j2
      dest: "/etc/nginx/nginx.conf"
      backup: yes

  - name: Start nginx
    service:
      name: nginx
      state: started
    tags: nginx
    
