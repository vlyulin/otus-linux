<?php

// require('db.php');
// require(dirname( __FILE__ ) . '/db.php');

// Initialize Constants
define('NUMSTU', 3); 
define('DBHOST', '{{ db_host }}');
define('DBPORT', '{{ db_port }}'); 
define('DBNAME', '{{ db_name }}');
define('USER', '{{ db_user }}');
define('PASSWORD', '{{ db_password }}');
define('TAEMAIL', 'someemail@mail.ru');
define('ERRINVALID', 'INVALID');
define('ERRDATA', 'DATA');
define('ERRNOSTU', 'DATA');
define('ERRDB', 'DB');
define('ERRNONE', 'OK');

function connectDB($dbhost, $dbport, $dbname, $user, $pass) {
   // Setup the connection parameters
   $hostStr = "host=" . $dbhost . " port=" . $dbport;
   $dbStr = "dbname=" . $dbname;
   $userStr = "user=" . $user;
   $passStr = "password=" . $pass;

   // Put it all together
   $connStr = $hostStr . " " . $dbStr . " " . $userStr . " " . $passStr;
   echo $connStr;

   // Make the connection, suppress errors
   try {
     // $dbconn = @pg_connect($connStr);
     $dbconn = pg_connect($connStr) or die("Could not connect");
     echo pg_last_error($dbconn);
   } Catch (Exception $e) {
     Echo $e->getMessage();
   }

   return $dbconn;
}

function checkStudent($dbconn, $first, $last) {
   // Convert to uppercase
   $fixedFirst = strtoupper($first);
   $fixedLast = strtoupper($last);

   // Put the SQL statement together
   $sql = "SELECT gid FROM students WHERE lastname='" . $fixedLast . "' AND firstname='" . $fixedFirst . "';";

   // Run the SQL statement
   $result = @pg_query($sql);

   // Check if the DB returned a result object (not necessarily success)
   if (! $result)
      return -1;

   // Return with error if we did not locate exactly 1 tuple (student not found)
   if (pg_num_rows($result) != 1)
      return -2;

   // Return with error if the gid field is not null (student already registered)
   if (! pg_field_is_null($result, 0, 0))
      return -3;

   // All good
      return 0;
}

function addGroup($dbconn, $ip) {

   $sql = "SELECT gid FROM groups WHERE sourceIP = '" . $ip . "' LIMIT 1;";
   $result = @pg_query($dbconn, $sql);
   // if (! $result) {
   //    echo $sql . " Not selected.<br>";
   //    return -1;
   // }
   if ($result) {
        while ($row = pg_fetch_row($result)) {
          echo "fetch gid: $row[0] <br>";
          return $row[0];
        }
   }
   else {
        echo "Not selected. " . $sql . "<br>";
   }

   // if (pg_affected_rows($result) = 1) {
   //   $row = pg_fetch_row($result);
   //   return $row[0];
   // }

   // Put the SQL statement together
   $sql = "INSERT INTO groups (sourceIP) VALUES('" . $ip . "');";

   // Run the SQL statement
   echo "SQL: " . $sql . "<br>";
   // $result = @pg_query($dbconn, $sql);
   $result = pg_query($dbconn, $sql);

   // Check if the DB returned a response object
   if (!$result) {
      echo "! result: -1 <br>" . pg_last_error($dbconn) . "<br>";
      echo pg_last_error($dbconn);
      return -1;
   }

   // Check if 1 row was affected (inserted/deleted/updated)
   if (pg_affected_rows($result) != 1) {
      echo "affected_rows: -2 <br>";
      return -2;
   }

   $sql = "SELECT gid FROM groups WHERE sourceIP = '" . $ip . "' LIMIT 1;";
   $result = @pg_query($sql);
   if (! $result) {
       echo $sql . " Not selected.<br>";
       return -1;
   }
   if ($result) {
        while ($row = pg_fetch_row($result)) {
          echo "fetch gid: $row[0] <br>";
          return $row[0];
        }
   }

   return -100;

   // Generate the SQL to retrieve the tuple we just inserted using OID (a PostgreSQL trick)
   $gidsql = "SELECT gid FROM groups WHERE oid=" . pg_last_oid($result) . ";";

   // Run the SQL statement
   $gidresult = @pg_query($gidsql);

   // Check if the DB returned a response object
   if (! $gidresult)
      return -3;

   // Check if exactly 1 row was located
   if (pg_num_rows($gidresult) != 1)
      return -4;

   // Retrieve the gid automatically assigned and return it
   $gidrow = pg_fetch_row($gidresult, 0);
   return ($gidrow[0]);
}

function registerStudent($dbconn, $first, $last,  $login, $gid) {
   // Convert to uppercase
   $fixedFirst = strtoupper($first);
   $fixedLast = strtoupper($last);
   $fixedLogin = strtolower($login);

   $sql = "INSERT INTO students (firstname, lastname, login, gid) VALUES ('" . $first . "', '" . $last . "', '" . $login . "', '" . $gid . "');";
   $result = @pg_query($sql);

   // Put the SQL statement together
   // $sql = "UPDATE students SET login='" . $fixedLogin . "', gid='" . $gid;
   // $sql .= "' WHERE firstname='" . $fixedFirst . "' AND lastname='" . $fixedLast . "';";

   // Run the SQL statement
   // $result = @pg_query($sql);

   // Check if the DB returned a response object
   if (! $result) {
      echo "INSERT student: " . pg_last_error($dbconn) . "; Return -1<br>";
      return -1;
   }

   // Check if we updated exactly 1 row
   if (pg_affected_rows($result) != 1) {
      echo "INSERT student: " . pg_last_error($dbconn) . "; Return -2<br>";
      return -2;
   }

   return 0;
}

function addLog($dbconn, $ipSrv, $ipClt, $data) {
   // Put the SQL statement together
   $sql = "INSERT INTO log (ipSrv, ipClt, data) VALUES('" . $ipSrv . "','" . $ipClt . "','" . $data . "');";

   // Run the SQL statement
   pg_query($sql);
}

// Verify information present for each student
for ($i=1; $i<=NUMSTU; $i++) {
   $FNArr[$i] = $_GET['M' . $i . 'FN'];
   $LNArr[$i] = $_GET['M' . $i . 'LN'];
   $CLArr[$i] = $_GET['M' . $i . 'CL'];
   
   // Check if data present
   if ((strlen($FNArr[$i]) < 1) || (strlen($LNArr[$i]) < 1) || (strlen($CLArr[$i]) != 8)) {
      echo ERRINVALID;
      exit;
   }

   // Check if data contains invalid data
   // if (!(preg_match ("^[a-zA-Z0-9 \-]+$", $FNArr[$i]))) {
   //    echo ERRINVALID;
   //    exit;
   // }
   // if (!(preg_match ("^[a-zA-Z0-9 \-]+$", $LNArr[$i]))) {
   //    echo ERRINVALID;
   //    exit;
   // }
   // if (!(preg_match ("^[a-zA-Z0-9 \-]+$", $CLArr[$i]))) {
   //    echo ERRINVALID;
   //    exit;
   // }

   // Make sure its different than previous entries
   for($j=1; $j<$i; $j++) {
      if (($FNArr[$i] == $FNArr[$j]) || ($LNArr[$i] == $LNArr[$j]) || ($CLArr[$i] == $CLArr[$j])) {
          echo ERRINVALID;
          exit;
      }
   }
}

// Verify IP information for logging
$IPCLT = $_GET['IP'];
$IPSRV = $_SERVER['REMOTE_ADDR'];

// Connect to the database
$dbconn = connectDB(DBHOST, DBPORT, DBNAME, USER, PASSWORD);
if (! $dbconn) {
   echo ERRDB;
   exit;
}

// Log the request
addLog($dbconn, $IPSRV, $IPCLT, $_SERVER['REQUEST_URI']);

// Begin transaction
pg_query($dbconn, "BEGIN");

// Check for each student
// for($i=1; $i<=NUMSTU; $i++) {
//    $result = checkStudent($dbconn, $FNArr[$i], $LNArr[$i]);
//    if ($result < 0) {
      // We not sure what problem was, rollback any changes made to DB
//       pg_query($dbconn, "ROLLBACK");
//       echo ERRNOSTU;
      // Log the failure
//       addLog($dbconn, $IPSRV, $IPCLT, "FAILURE ON STUDENT CHECK: " . $i . " CODE: " . $result);
//       exit;
//    }
// }

// Add Group
$GN = 20;
$gid = addGroup($dbconn, $GN);
if ($gid < 0) {
   // We not sure what problem was, rollback any changes made to DB
   pg_query($dbconn, "ROLLBACK");
   echo ERRDB;
   // Log the failure
   addLog($dbconn, $IPSRV, $IPCLT, "FAILURE GROUP CREATION " . $gid);
   exit;
}

// Register the students
for ($i=1; $i<=NUMSTU; $i++) {
   if (registerStudent($dbconn, $FNArr[$i], $LNArr[$i], $CLArr[$i], $gid) < 0) {
      // We not sure what problem was, rollback any changes made to DB
      pg_query($dbconn, "ROLLBACK");
      echo ERRDB;
      // Log the failure
      addLog($dbconn, $IPSRV, $IPCLT, "FAILURE ON REG STUDENT: " . $i);
      exit;
   }
}

// All good, commit changes to DB and return
pg_query($dbconn, "COMMIT");
echo ERRNONE;

// Log the success
addLog($dbconn, $IPSRV, $IPCLT, "SUCCESS " . $gid . " REGISTERED");

// Email the members
$subject = "CS186 Group Registration Confirmation";
$body = "This account has been registered as part of a group.\n\nThe members are:\n";
for ($i=1; $i<=NUMSTU; $i++) {
   $emails .= $CLArr[$i] . "@cory.eecs.berkeley.edu, ";
   $body .= $FNArr[$i] . " " . $LNArr[$i] . " (" . $CLArr[$i] . ")\n";
}
$body .= "\nIf there are any errors, please contact your TA.\n\n";
$headers = "Bcc: " . TAEMAIL . "\r\n";
$emails = trim($emails, ",");
mail($emails, $subject, $body, $headers);

?>
